---
# This role is responsible for installing and configuring Hashicorp Vault
# TODO: Add swap disable
# TODO: Change to: https://docs.ansible.com/ansible/latest/modules/pam_limits_module.html
# TODO: Check licenses for Hashicorp Vault policies used by Epiphany
# TODO: Add vault to PATH
# TODO: Limit to set only on 1 master until vault will be clustered

- name: Install and configure Hashicorp Vault if enabled
  when:
    - specification.vault_enabled
  block:
    - name: Create Vault system group
      group:
        name: "{{ specification.vault_system_group }}"
        system: yes

    - name: Create Vault system user
      user:
        name: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        system: yes
        shell: "/usr/sbin/nologin"

    - name: Create Vault directories
      file:
        path: "{{ specification.vault_install_dir }}/{{ item }}"
        state: directory
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rwx,g=rx,o=
      loop:
        - "bin"
        - "config"
        - "data"
        - "kubernetes"
        - "logs"

    - name: Set Vault file name to install
      set_fact:
        vault_file_name: "{{ specification.file_name }}"

    - name: Download Vault binaries
      include_role:
        name: download
        tasks_from: download_file
      vars:
        file_name: "{{ vault_file_name }}"

    - name: Check for Vault package
      stat:
        path: "{{ specification.vault_install_dir }}/bin/vault"
      register: vault_package

    - name: Uncompress the Vault zip
      when: not vault_package.stat.exists
      unarchive:
        remote_src: yes
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        src: "{{ download_directory }}/{{ vault_file_name }}"
        creates: "{{ specification.vault_install_dir }}/bin/vault"
        dest: "{{ specification.vault_install_dir }}/bin/"
        mode: u=rwx,g=r,o=

    - name: Create Vault configuration file
      template:
        dest: "{{ specification.vault_install_dir }}/config/config.hcl"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: vault/config.hcl.j2

    - name: Set capabilities required to lock memory
      capabilities:
        path: "{{ specification.vault_install_dir }}/bin/vault"
        capability: cap_ipc_lock=+ep
        state: present

    - name: Set fs.suid_dumpable to 0
      sysctl:
        name: fs.suid_dumpable
        value: '0'
        sysctl_set: yes
        state: present
        reload: yes

    - name: Check if limits for Vault are set
      shell: grep -e "^\*[[:space:]]*hard[[:space:]]*core[[:space:]]*0" /etc/security/limits.conf
      changed_when: false
      register: test_grep
      failed_when: "test_grep.rc == 2"

    # TODO: Change to: https://docs.ansible.com/ansible/latest/modules/pam_limits_module.html
    - name: Set if limits for Vault are not set
      when: test_grep.stdout != ""
      lineinfile:
        dest: /etc/security/limits.conf
        line: "* hard core 0"

    - name: Create systemd config
      template:
        dest: /etc/systemd/system/vault.service
        owner: root
        group: root
        mode: u=rw,g=r,o=
        src: vault/vault.service.j2
      register: service_conf

    - name: Restart Vault service and reload config
      systemd:
        name: vault
        state: restarted
        daemon_reload: yes
      when:
        - service_conf.changed

    - name: Start Vault service
      systemd:
        name: vault
        state: started
        enabled: yes

    - name: Copy Vault configuration script
      copy:
        src: vault/configure-vault.sh
        dest: "{{ specification.vault_install_dir }}/bin/"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rwx,g=r,o=

    - name: Copy Vault policies configuration
      copy:
        src: "vault/{{ item }}"
        dest: "{{ specification.vault_install_dir }}/config/"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
      loop:
        - policy-admin.hcl
        - policy-provisioner.hcl

    - name: Generate application policy
      template:
        dest: "{{ specification.vault_install_dir }}/config/policy-application.hcl"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: vault/policy-application.hcl.j2

    - name: Generate config script confiugration
      template:
        dest: "{{ specification.vault_install_dir }}/script.config"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: vault/script.config.j2

    - name: Generate users to be created by the script
      template:
        dest: "{{ specification.vault_install_dir }}/users.csv"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: vault/users.csv.j2

    - name: Create vault endpoint configuration on kubernetes cluster
      template:
        dest: "{{ specification.vault_install_dir }}/kubernetes/vault-endpoint-configuration.yml"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: kubernetes/vault-endpoint-configuration.yml.j2

    - name: Create Vault service account
      template:
        dest: "{{ specification.vault_install_dir }}/kubernetes/vault-service-account.yml"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: kubernetes/vault-service-account.yml.j2

    - name: Create application service account
      template:
        dest: "{{ specification.vault_install_dir }}/kubernetes/app-service-account.yml"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: kubernetes/app-service-account.yml.j2

    - name: Run configuration script
      #become: yes
      when:
        - specification.vault_script_unseal
      shell: >-
        {{ specification.vault_install_dir }}/bin/configure-vault.sh
        -c {{ specification.vault_install_dir }}/script.config
        -a {{ ansible_default_ipv4.address }}

    - name: Display information about running configuration script
      when:
        - not specification.vault_script_unseal
      debug:
        msg: "Init file doesn't exist or you have chosen manual unseal, so to finish configuration please run script manually with command:
              {{ specification.vault_install_dir }}/bin/configure-vault.sh -c {{ specification.vault_install_dir }}/script.config -a {{ ansible_default_ipv4.address }}.
              Also please put 'init.txt' file, containing output from 'vault operator init' command, in ''{{ specification.vault_install_dir }}' directory."
